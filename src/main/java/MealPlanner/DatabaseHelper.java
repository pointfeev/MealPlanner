package MealPlanner;

import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.driver.OracleDriver;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

public class DatabaseHelper {
    final static int LOGIN_TIMEOUT = 3;

    private static Connection connection = null;

    /**
     * Establishes a JDBC connection with the database; see {@link DriverManager#getConnection(String)}
     */
    public static boolean connect() {
        Properties properties = getProperties();
        if (properties == null) {
            return false;
        }
        String url = properties.getProperty("url");
        String username = properties.getProperty("username");
        String password = properties.getProperty("password");

        try {
            DriverManager.registerDriver(new OracleDriver()); // optional, but just in case
            DriverManager.setLoginTimeout(LOGIN_TIMEOUT);
            connection = DriverManager.getConnection(url, username, password);
        } catch (SQLException exception) {
            handleSqlException(exception);
            return false;
        }
        return true;
    }

    /**
     * Closes the JDBC connection to the database; see {@link Connection#close()}
     */
    public static void disconnect() {
        try {
            connection.close();
        } catch (SQLException exception) {
            handleSqlException(exception);
        }
        connection = null;
    }

    /**
     * @param sql        SQL statement to prepare; see {@link Connection#prepareStatement(String)}
     * @param parameters Parameters to bind to the SQL statement (if any); see {@link OraclePreparedStatement#setObject(int, Object)}
     * @return The prepared statement with parameters (if any) bound to it; see {@link Connection#prepareStatement(String)} and {@link OraclePreparedStatement#setObject(int, Object)}
     * @throws SQLException May be thrown be either {@link Connection#prepareStatement(String)} or {@link OraclePreparedStatement#setObject(int, Object)}
     */
    private static OraclePreparedStatement prepareStatement(String sql, Object... parameters) throws SQLException {
        OraclePreparedStatement statement = (OraclePreparedStatement) connection.prepareStatement(sql);
        for (int index = 0; index < parameters.length; index++) {
            statement.setObject(index, parameters[index]);
        }
        return statement;
    }

    /**
     * @param sql        SQL statement to prepare and execute; see {@link Connection#prepareStatement(String)}
     * @param parameters Parameters to bind to the SQL statement (if any); see {@link OraclePreparedStatement#setObject(int, Object)}
     * @return ResultSet object generated by the query; see {@link OraclePreparedStatement#executeQuery()}
     */
    public static ArrayList<HashMap<String, Object>> executeQuery(String sql, Object... parameters) {
        try (OraclePreparedStatement statement = prepareStatement(sql, parameters)) {
            ResultSet resultSet = statement.executeQuery();

            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            ArrayList<HashMap<String, Object>> results = new ArrayList<>();
            while (resultSet.next()) {
                HashMap<String, Object> result = new HashMap<>();
                for (int index = 1; index <= columnCount; index++) {
                    String key = metaData.getColumnLabel(index);
                    Object value = resultSet.getObject(index);
                    result.put(key, value);
                }
                results.add(result);
            }
            return results;
        } catch (SQLException exception) {
            handleSqlException(exception);
        }
        return null;
    }

    /**
     * @param sql        SQL statement to prepare and execute; see {@link Connection#prepareStatement(String)}
     * @param parameters Parameters to bind to the SQL statement (if any); see {@link OraclePreparedStatement#setObject(int, Object)}
     * @return Number of rows updated by the query; see {@link OraclePreparedStatement#executeUpdate()}
     */
    public static int executeUpdate(String sql, Object... parameters) {
        try (OraclePreparedStatement statement = prepareStatement(sql, parameters)) {
            return statement.executeUpdate();
        } catch (SQLException exception) {
            handleSqlException(exception);
        }
        return -1;
    }

    public static void handleSqlException(SQLException exception) {
        if (exception instanceof SQLTimeoutException) {
            // TODO
            System.out.printf("Connection timed out after %d seconds!\n", LOGIN_TIMEOUT);
            return;
        }

        // TODO
        exception.printStackTrace();
        // JOptionPane.showMessageDialog(null, e);
    }

    private static Properties getProperties() {
        Properties properties = new Properties();
        try (InputStream stream = DatabaseHelper.class.getClassLoader().getResourceAsStream("database.properties")) {
            if (stream == null) {
                // TODO
                System.out.println("Failed to obtain database properties! Make sure to follow the instructions in the README.");
                return null;
            }
            properties.load(stream);
        } catch (IOException e) {
            // TODO
        }
        return properties;
    }
}
