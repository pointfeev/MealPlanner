package MealPlanner.Forms;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class RecipePanel {
    public JPanel contentPane;
    public JPanel topPane;
    public JLabel categoryLabel;
    public JLabel nameLabel;
    public JButton editButton;

    public RecipePanel() {
        $$$setupUI$$$();

        contentPane = new JPanel();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
        contentPane.add(topPane);
    }

    public void updateSize() {
        Dimension preferredSize = topPane.getPreferredSize();
        topPane.setMaximumSize(new Dimension(preferredSize.width, preferredSize.height));

        preferredSize = contentPane.getPreferredSize();
        contentPane.setMaximumSize(new Dimension(preferredSize.width, preferredSize.height));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPane = new JPanel();
        topPane.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 5));
        topPane.setAlignmentX(0.0f);
        categoryLabel = new JLabel();
        Font categoryLabelFont = this.$$$getFont$$$(null, Font.ITALIC, -1, categoryLabel.getFont());
        if (categoryLabelFont != null) categoryLabel.setFont(categoryLabelFont);
        categoryLabel.setText("Label");
        topPane.add(categoryLabel);
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setHorizontalAlignment(0);
        nameLabel.setHorizontalTextPosition(0);
        nameLabel.setText("Label");
        topPane.add(nameLabel);
        editButton = new JButton();
        editButton.setText("Edit");
        topPane.add(editButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPane;
    }

}
