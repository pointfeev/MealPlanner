package MealPlanner.Forms;

import MealPlanner.Main;
import MealPlanner.Models.FoodItem;
import MealPlanner.Models.FridgeItem;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.ArrayList;
import java.util.Locale;

import static MealPlanner.Models.FoodItem.formatMilligrams;

public class FridgeItemPanel extends Panel {
    public FridgeItem fridgeItem;

    public JPanel contentPane;
    public JLabel label;
    public JButton editButton;
    public JButton detailsButton;

    public FridgeItemPanel(FridgeItem fridgeItem) {
        $$$setupUI$$$();

        this.fridgeItem = fridgeItem;
        FoodItem foodItem = fridgeItem.getFoodItem();
        label.setText(foodItem.formatQuantity(fridgeItem.quantity.intValue()));
        detailsButton.addActionListener(event -> {
            ArrayList<String> keysList = new ArrayList<>();
            ArrayList<String> valuesList = new ArrayList<>();

            if (foodItem.food_group != null) {
                keysList.add("Food Group");
                valuesList.add(foodItem.food_group);
            }
            if (foodItem.calories != null) {
                keysList.add("Calories");
                valuesList.add(String.valueOf(foodItem.calories.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.fat != null) {
                keysList.add("Fat");
                valuesList.add(formatMilligrams(foodItem.fat.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.cholesterol != null) {
                keysList.add("Cholesterol");
                valuesList.add(formatMilligrams(foodItem.cholesterol.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.sodium != null) {
                keysList.add("Sodium");
                valuesList.add(formatMilligrams(foodItem.sodium.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.carbohydrates != null) {
                keysList.add("Carbohydrates");
                valuesList.add(formatMilligrams(foodItem.carbohydrates.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.dietary_fiber != null) {
                keysList.add("Dietary Fiber");
                valuesList.add(formatMilligrams(foodItem.dietary_fiber.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.sugars != null) {
                keysList.add("Sugars");
                valuesList.add(formatMilligrams(foodItem.sugars.intValue() * fridgeItem.quantity.intValue()));
            }
            if (foodItem.protein != null) {
                keysList.add("Protein");
                valuesList.add(formatMilligrams(foodItem.protein.intValue() * fridgeItem.quantity.intValue()));
            }

            new DetailsFrame(label.getText(), keysList.toArray(new String[0]), valuesList.toArray(new String[0]));
        });
        editButton.addActionListener(event -> {
            new FridgeItemUpdatePanel(fridgeItem);
            Main.mainFrame.refresh();
        });

        updateSize(contentPane);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));
        contentPane.setAlignmentX(0.0f);
        final JSeparator separator1 = new JSeparator();
        separator1.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator1);
        label = new JLabel();
        Font labelFont = this.$$$getFont$$$(null, -1, -1, label.getFont());
        if (labelFont != null) label.setFont(labelFont);
        label.setHorizontalAlignment(0);
        label.setHorizontalTextPosition(0);
        label.setText("Label");
        contentPane.add(label);
        final JSeparator separator2 = new JSeparator();
        separator2.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator2);
        detailsButton = new JButton();
        detailsButton.setText("Details");
        contentPane.add(detailsButton);
        final JSeparator separator3 = new JSeparator();
        separator3.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator3);
        editButton = new JButton();
        editButton.setText("Edit");
        contentPane.add(editButton);
        final JSeparator separator4 = new JSeparator();
        separator4.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator4);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
