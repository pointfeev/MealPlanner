package MealPlanner.Forms;

import MealPlanner.Models.Meal;
import MealPlanner.Models.MealPlan;
import MealPlanner.Models.Recipe;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Locale;

public class MealPanel extends Panel {
    public Meal meal;

    public JPanel contentPane;
    public JPanel topPane;
    public JLabel dayLabel;
    public JLabel nameLabel;
    public JLabel typeLabel;

    public MealPanel(MealPlan mealPlan, Meal meal) {
        $$$setupUI$$$();

        contentPane = new JPanel();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
        contentPane.add(topPane);

        this.meal = meal;
        LocalDate weekStartLocalDate = mealPlan.week_start.toLocalDate();
        Date day = Date.valueOf(weekStartLocalDate.plusDays(meal.day.intValue() - 1));
        String dayOfWeek = new SimpleDateFormat("EEEEE").format(day);
        dayLabel.setText(dayOfWeek);
        String typeCapitalized = meal.type.substring(0, 1).toUpperCase() + meal.type.substring(1).toLowerCase();
        typeLabel.setText(typeCapitalized);
        Recipe recipe = meal.getRecipe();
        nameLabel.setText(recipe.name);

        updateSize(topPane);
        updateSize(contentPane);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPane = new JPanel();
        topPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));
        topPane.setAlignmentX(0.0f);
        final JSeparator separator1 = new JSeparator();
        separator1.setPreferredSize(new Dimension(30, 0));
        topPane.add(separator1);
        dayLabel = new JLabel();
        Font dayLabelFont = this.$$$getFont$$$(null, Font.ITALIC, -1, dayLabel.getFont());
        if (dayLabelFont != null) dayLabel.setFont(dayLabelFont);
        dayLabel.setText("Label");
        topPane.add(dayLabel);
        final JSeparator separator2 = new JSeparator();
        separator2.setPreferredSize(new Dimension(20, 0));
        topPane.add(separator2);
        typeLabel = new JLabel();
        Font typeLabelFont = this.$$$getFont$$$(null, -1, -1, typeLabel.getFont());
        if (typeLabelFont != null) typeLabel.setFont(typeLabelFont);
        typeLabel.setText("Label");
        topPane.add(typeLabel);
        final JSeparator separator3 = new JSeparator();
        separator3.setPreferredSize(new Dimension(20, 0));
        topPane.add(separator3);
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setHorizontalAlignment(0);
        nameLabel.setHorizontalTextPosition(0);
        nameLabel.setText("Label");
        topPane.add(nameLabel);
        final JSeparator separator4 = new JSeparator();
        separator4.setPreferredSize(new Dimension(30, 0));
        topPane.add(separator4);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPane;
    }

}
