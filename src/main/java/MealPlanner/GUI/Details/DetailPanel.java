package MealPlanner.GUI.Details;

import MealPlanner.GUI.Components.Panel;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class DetailPanel extends Panel {
    public JPanel contentPane;
    public JLabel keyLabel;
    public JLabel valueLabel;

    public DetailPanel(String key, String value) {
        $$$setupUI$$$();

        keyLabel.setText(key);
        valueLabel.setText(value);

        updateSize(contentPane);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));
        contentPane.setAlignmentX(0.0f);
        final JSeparator separator1 = new JSeparator();
        separator1.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator1);
        keyLabel = new JLabel();
        Font keyLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, keyLabel.getFont());
        if (keyLabelFont != null) keyLabel.setFont(keyLabelFont);
        keyLabel.setText("Label");
        contentPane.add(keyLabel);
        final JSeparator separator2 = new JSeparator();
        separator2.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator2);
        valueLabel = new JLabel();
        Font valueLabelFont = this.$$$getFont$$$(null, -1, -1, valueLabel.getFont());
        if (valueLabelFont != null) valueLabel.setFont(valueLabelFont);
        valueLabel.setHorizontalAlignment(0);
        valueLabel.setHorizontalTextPosition(0);
        valueLabel.setText("Label");
        contentPane.add(valueLabel);
        final JSeparator separator3 = new JSeparator();
        separator3.setPreferredSize(new Dimension(10, 0));
        contentPane.add(separator3);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
